version: "3.5"

services:
  api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    #image: ana/minha-api-matadora:latest
    build:
      context: .
      dockerfile: ./Dockerfile
    hostname: api01
    environment:
      - RINHA_DEBUG=False
      - RINHA_ECHO_SQL=False
      - RINHA_DB__DB_NAME=rinha
      - RINHA_DB__DB_USER=rinha
      - RINHA_DB__DB_PASSWORD=rinha
      - RINHA_DB__DB_HOST=db
      - RINHA_DB__DB_PORT=5432
      - RINHA_DB__DB_POOL_SIZE=35
      - RINHA_DB__DB_MAX_OVERFLOW=10
      - RINHA_DB__DB_POOL_TIMEOUT=30
    # Não é necessário expor qualquer porta além da porta do load balancer,
    # mas é comum as pessoas o fazerem para testarem suas APIs e conectarem
    # ao banco de dados na fase de desenvolvimento.
    ports:
      - "18081:8080"
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "100MB"
    healthcheck:
      test: wget --no-verbose -O /dev/null --tries=1 http://api01:8080 || exit 1
      interval: 2s
      start_period: 10s
      timeout: 5s
      retries: 30
  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api
    hostname: api02
    ports:
      - "18082:8080"
    healthcheck:
      test: wget --no-verbose -O /dev/null --tries=1 http://api02:8080 || exit 1
      interval: 2s
      start_period: 5s
      timeout: 5s
      retries: 10
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      api01:
        condition: service_healthy
      # api02:
      #   condition: service_healthy
    ports:
        # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.10"
          memory: "20MB"
  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_PASSWORD=rinha
      - POSTGRES_USER=rinha
      - POSTGRES_DB=rinha
    ports:
      - "15432:5432"
    volumes:
      - ./postgresql/ddl.sql:/docker-entrypoint-initdb.d/ddl.sql
      - ./postgresql/dml.sql:/docker-entrypoint-initdb.d/dml.sql
      - ./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c "config_file=/etc/postgresql/postgresql.conf"
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "0.4"
          memory: "330MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=rinha --username=rinha"]
      interval: 2s
      timeout: 2s
      retries: 30

# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1
