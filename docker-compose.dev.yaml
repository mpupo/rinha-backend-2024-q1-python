version: "3.5"

services:
  api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    #image: ana/minha-api-matadora:latest
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        HOSTNAME: api01
        UVICORN_PORT: 8080
    hostname: api01
    environment:
      - RINHA_DB__DB_NAME=rinha
      - RINHA_DB__DB_USER=rinha
      - RINHA_DB__DB_PASSWORD=rinha
      - RINHA_DB__DB_HOST=/var/run/postgresql
      - RINHA_DB__DB_PORT=5432
      - RINHA_DB__DB_POOL_SIZE=10
      - RINHA_DB__DB_MAX_OVERFLOW=40
      - RINHA_DB__DB_POOL_TIMEOUT=30
      - RINHA_ECHO_SQL=True
      - RINHA_DEBUG=True
    # Não é necessário expor qualquer porta além da porta do load balancer,
    # mas é comum as pessoas o fazerem para testarem suas APIs e conectarem
    # ao banco de dados na fase de desenvolvimento.
    ports:
      - "18081:8080"
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "100MB"
    volumes:
      - sockets:/var/run/rinha:rw
      - postgres:/var/run/postgresql:rw
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - sockets:/var/run/rinha:rw
    depends_on:
      api01:
        condition: service_healthy
    ports:
        # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.10"
          memory: "15MB"
  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_PASSWORD=rinha
      - POSTGRES_USER=rinha
      - POSTGRES_DB=rinha
    ports:
      - "15432:5432"
    volumes:
      - ./postgresql/ddl.sql:/docker-entrypoint-initdb.d/ddl.sql
      - ./postgresql/dml.sql:/docker-entrypoint-initdb.d/dml.sql
      - ./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - postgres:/var/run/postgresql:rw
    command: postgres -c "config_file=/etc/postgresql/postgresql.conf"
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "0.4"
          memory: "335MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=rinha --username=rinha"]
      interval: 2s
      timeout: 2s
      retries: 30
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: "rinha@rinha.com"
      PGADMIN_DEFAULT_PASSWORD: "rinha"
    ports:
      - "8080:80"
    depends_on:
      db:
        condition: service_healthy

# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1

volumes:
  sockets:
  postgres:
